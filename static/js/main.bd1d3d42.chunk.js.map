{"version":3,"sources":["Header.js","NameCardForm.js","AuthCard.js","Question.js","Answer.js","Card.js","NameCard.js","App.js","Welcome.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","src","alt","NameCardForm","props","setName","Fragment","className","onSubmit","e","document","getElementById","value","type","name","id","AuthCard","logout","Question","question","hint","handleCardFlip","getCard","onClick","Answer","answer","Card","state","showQuestion","cards","currentCard","cardsLength","_this","length","randomIndex","Math","floor","random","setState","prevState","this","_this$state$currentCa","showSide","src_Question","src_Answer","Component","Authenticated","src_AuthCard","src_Card","NameCard","hasName","userName","preventDefault","console","log","_this$state","cardShown","NameCard_Authenticated","src_NameCardForm","App","src_Header","src_NameCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd1d3d42.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <img src='img/logo.png' alt='app logo' />\r\n      <p>An app to help you study</p>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nconst NameCardForm = props => {\r\n  const { setName } = props;\r\n  return (\r\n    <>\r\n      <div className='namecard-login'>\r\n        <p className='namecard-greeting'>Hello, student!</p>\r\n      </div>\r\n      <form\r\n        className='namecard-form'\r\n        onSubmit={e => setName(e, document.getElementById('username').value)}\r\n      >\r\n        <label className='namecard-prompt'>\r\n          Please enter your name:\r\n          <input\r\n            className='namecard-name'\r\n            type='text'\r\n            name='username'\r\n            id='username'\r\n          />\r\n        </label>\r\n        <button className='namecard-submit' type='submit'>\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NameCardForm;\r\n","import React from 'react';\r\n\r\nconst AuthCard = props => {\r\n  const { name, logout } = props;\r\n  return (\r\n    <div className='namecard-login'>\r\n      <p className='namecard-greeting'>Welcome, {name}!</p>\r\n      <form\r\n        className='namecard-exit'\r\n        onSubmit={e => {\r\n          logout(e);\r\n        }}\r\n      >\r\n        <button type='submit'>\r\n          <img src='/img/close.svg' />\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthCard;\r\n","import React, { Component } from 'react';\r\n\r\nconst Question = props => {\r\n  const { question, hint, handleCardFlip, getCard } = props;\r\n  return (\r\n    <div className='card card-question'>\r\n      <div className='card-header' />\r\n      <h1 className='card-title'>question</h1>\r\n      <div id='content'>\r\n        <h2>{question}</h2>\r\n        <p className='hint'>\r\n          <i>{hint}</i>\r\n        </p>\r\n      </div>\r\n      <div className='card-flip-wrap' onClick={() => handleCardFlip()}>\r\n        <img className='card-flip' src='/img/flip.svg' />\r\n      </div>\r\n      <div className='card-next' onClick={() => getCard()}>\r\n        <img src='/img/next.svg' />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","import React from 'react';\r\n\r\nconst Answer = props => {\r\n  const { answer, handleCardFlip, getCard } = props;\r\n  return (\r\n    <div className='card card-answer'>\r\n      <div className='card-header' />\r\n      <h1 className='card-title'>answer</h1>\r\n      <div id='content'>\r\n        <h2>{answer}</h2>\r\n      </div>\r\n      <div className='card-flip-wrap' onClick={() => handleCardFlip()}>\r\n        <img className='card-flip' src='/img/flip.svg' />\r\n      </div>\r\n      <div className='card-next' onClick={() => getCard()}>\r\n        <img src='/img/next.svg' />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Answer;\r\n","import React, { Component } from 'react';\r\nimport Question from './Question';\r\nimport Answer from './Answer';\r\n\r\nclass Card extends Component {\r\n  state = {\r\n    showQuestion: true,\r\n    cards: [\r\n      {\r\n        question: 'What language are Express apps written in?',\r\n        hint: 'It starts with a \"J\"',\r\n        answer: 'JavaScript'\r\n      },\r\n      {\r\n        question:\r\n          \"What is one way a website can store data in a user's browser?\",\r\n        hint: 'They are delicious with milk',\r\n        answer: 'Cookies'\r\n      },\r\n      {\r\n        question:\r\n          \"What is a common way to shorten the response object's name inside middleware?\",\r\n        hint: 'It has the same abbreviation as \"resolution\"',\r\n        answer: 'res'\r\n      },\r\n      {\r\n        question: 'How many different values can booleans have?',\r\n        hint: 'Think: binary',\r\n        answer: '2'\r\n      },\r\n      {\r\n        question: 'Which HTML element can contain JavaScript?',\r\n        hint: 'It starts with an \"s\"',\r\n        answer: '<script>'\r\n      }\r\n    ],\r\n    currentCard: {}\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getCard();\r\n  }\r\n\r\n  getCard = () => {\r\n    const cardsLength = this.state.cards.length;\r\n    const randomIndex = Math.floor(Math.random() * cardsLength);\r\n    this.setState({\r\n      currentCard: this.state.cards[randomIndex],\r\n      showQuestion: true\r\n    });\r\n  };\r\n\r\n  handleCardFlip = () => {\r\n    this.setState(prevState => ({\r\n      showQuestion: !prevState.showQuestion\r\n    }));\r\n  };\r\n  render() {\r\n    const { question, hint, answer } = this.state.currentCard;\r\n    const showSide = this.state.showQuestion ? (\r\n      <Question\r\n        question={question}\r\n        hint={hint}\r\n        handleCardFlip={this.handleCardFlip}\r\n        getCard={this.getCard}\r\n      />\r\n    ) : (\r\n      <Answer\r\n        answer={answer}\r\n        handleCardFlip={this.handleCardFlip}\r\n        getCard={this.getCard}\r\n      />\r\n    );\r\n\r\n    return <section className='flashcards'>{showSide}</section>;\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from 'react';\r\nimport NameCardForm from './NameCardForm';\r\nimport AuthCard from './AuthCard';\r\nimport Card from './Card';\r\n\r\nconst Authenticated = props => {\r\n  const { name, logout } = props;\r\n\r\n  return (\r\n    <>\r\n      <AuthCard name={name} logout={logout} />\r\n      <Card />\r\n    </>\r\n  );\r\n};\r\n\r\nclass NameCard extends Component {\r\n  state = {\r\n    name: '',\r\n    hasName: false\r\n  };\r\n\r\n  setName = (e, userName) => {\r\n    e.preventDefault();\r\n    console.log('clicked', userName);\r\n    if (!userName) return;\r\n\r\n    this.setState({\r\n      name: userName,\r\n      hasName: true\r\n    });\r\n  };\r\n\r\n  logout = e => {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      name: '',\r\n      hasName: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, hasName } = this.state;\r\n\r\n    const cardShown = hasName ? (\r\n      <Authenticated name={name} />\r\n    ) : (\r\n      <NameCardForm setName={this.setName} />\r\n    );\r\n    return <section className='namecard'>{cardShown}</section>;\r\n  }\r\n}\r\n\r\nexport default NameCard;\r\n","import React, { Component } from 'react';\nimport Header from './Header';\nimport NameCard from './NameCard';\nimport Welcome from './Welcome';\nimport Card from './Card';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Header />\n        <NameCard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\n\r\nclass Welcome extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <section className='namecard'>\r\n          <div className='namecard-login'>\r\n            <p className='namecard-greeting'>Welcome, fallencloud!</p>\r\n            <form className='namecard-exit' action='/goodbye' method='POST'>\r\n              <button type='submit'>\r\n                <img src='/static/img/close.svg' />\r\n              </button>\r\n            </form>\r\n          </div>\r\n          <h1 className='namecard-prompt'>Let's get started</h1>\r\n          <a className='namecard-submit' href='/cards'>\r\n            Begin!\r\n          </a>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Welcome;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}